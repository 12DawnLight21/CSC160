using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

class Game
{
    private char[,] board; //char array for board
    private char currentSymbol = 'X'; //x or o

    private int turn;

    public Game()
    {
        //initialize board
        board = new char[3, 3];

        //board starts with empty spaces
        for (int row = 0; row < 3; row++)
        {
            for (int col = 0; col < 3; col++)
            {
                board[row, col] = ' ';
            }
        }
    }

    public void DisplayBoard()
    {
        //clear console, then construct the board ;3
        Console.Clear();
        Console.WriteLine("  0   1   2"); //what column we at?
        for (int row = 0; row < 3; row++)
        {
            Console.Write(row + " "); //the spaces after da row
            for (int col = 0; col < 3; col++)
            {
                Console.Write(board[row, col]);
                if (col < 2)
                {
                    Console.Write(" | "); //line dividers!
                }
            }
            Console.WriteLine();
            if (row < 2)
            {
                Console.WriteLine("  ----------"); //horizontal dividers
            }
        }
        Console.WriteLine(); //basically prints a cool lookin board to the console
    }

    public bool PlaceMarker(int row, int col)
    {
        turn++; //increments, is used for checking ties
        if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row, col] != ' ')
        {
            return false;
        }

        board[row, col] = currentSymbol;
        return true;
    }

    public void SwitchPlayer()
    {
        currentSymbol = (currentSymbol == 'X') ? 'O' : 'X'; //ternary operator that switches player symbol
    }

    //this CheckWin() was generated by ChatGPT and slightly modified by me!
    //the generated code made use of gamestates, which i dont have, so i fixed it to not have gamestates
    // here's the URL for the generation
    // https://chat.openai.com/share/d279c3a5-5306-43fb-adf0-527cc67e6e59

    public bool CheckWin()
    {
        //if there are 3 spots in a row, that player wins!
        // Check rows
        for (int row = 0; row < 3; row++)
        {
            if (board[row, 0] == board[row, 1] && board[row, 1] == board[row, 2])
            {
                if (board[row, 0] == 'X')
                    return true; //1st wins
                else if (board[row, 0] == 'O')
                    return true; //2nd wins
            }
        }

        // Check columns
        for (int col = 0; col < 3; col++)
        {
            if (board[0, col] == board[1, col] && board[1, col] == board[2, col])
            {
                if (board[0, col] == 'X')
                    return true; //1st wins
                else if (board[0, col] == 'O')
                    return true; //2nd wins
            }
        }

        // Check diagonals
        if ((board[0, 0] == board[1, 1] && board[1, 1] == board[2, 2]) ||
            (board[0, 2] == board[1, 1] && board[1, 1] == board[2, 0]))
        {
            if (board[1, 1] == 'X')
                return true; //1st wins
            else if (board[1, 1] == 'O')
                return true; //2nd wins
        }

        return false;
    }

    public void PlayGame()
    {
        bool gameover = false;

        do
        {
            DisplayBoard();
            Console.WriteLine("Player " + currentSymbol + ", choose a row and then a column. (0 - 2):");

            int row; int col; //temperary ints

            while (true) //while in this loop, if its not valid you have to go until it IS valid
            {
                if (int.TryParse(Console.ReadLine(), out row) && int.TryParse(Console.ReadLine(), out col))
                {
                    if (PlaceMarker(row, col))
                        break;
                    else
                        Console.WriteLine("Invalid move. Try again.");
                }
                else
                {
                    Console.WriteLine("Invalid input. Enter row and column as numbers.");
                }
            }

            if (turn == 9)
            {
                DisplayBoard();
                Console.WriteLine("Sorry, it's a tie!");
                gameover = true;
            }

            if (turn > 5)
            {
                if (CheckWin())
                {
                    DisplayBoard();
                    Console.WriteLine("Player " + currentSymbol + " has won!");
                    gameover = true;
                }
            
            }

            SwitchPlayer(); //switches the player symbols
        }

        while (gameover == false);
    }

    static void Main(string[] args)
    {
        Game game = new Game();
        game.PlayGame();


        //TicTacToe game = new TicTacToe();
        //game.Play();
    }
}